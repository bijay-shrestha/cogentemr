dad4efa1780d133284d8920565589544
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _ = _interopRequireDefault(require(".."));

var _semanticUiReact = require("semantic-ui-react");

expect.addSnapshotSerializer(enzymeSerializer);
describe('Button Component', function () {
  var wrapper, onClickMock;
  beforeEach(function () {
    onClickMock = jest.fn();
    wrapper = mount(_react["default"].createElement(_["default"], {
      type: "submit",
      buttonName: "Submit",
      onClickHandler: onClickMock
    }));
  });
  afterEach(function () {
    wrapper.unmount();
  });
  it('should be defined', function () {
    expect(wrapper).toBeDefined();
  });
  it('should have only one button', function () {
    expect(wrapper.find('button')).toHaveLength(1);
  });
  it('should show name of the button', function () {
    expect(wrapper.find('button').text()).toEqual(wrapper.prop('buttonName'));
  });
  it('should  have the exactly given props props', function () {
    var propsToCheck = ['id', 'type', 'active', 'animated', 'as', 'attached', 'basic', 'children', 'circular', 'className', 'color', 'compact', 'content', 'disabled', 'floated', 'fluid', 'icon', 'inverted', 'label', 'labelPosition', 'loading', 'negative', 'onClick', 'positive', 'primary', 'role', 'secondary', 'size', 'tabIndex', 'toggle'];
    var buttonInputPropsKeys = Object.keys(wrapper.find(_semanticUiReact.Button).props());
    propsToCheck.map(function (reqProp, i) {
      expect(propsToCheck).toContain(buttonInputPropsKeys[i]);
    });
  });
  it('should only have type of submit or button', function () {
    var typeValue = ['submit', 'button'];
    expect(typeValue).toContain(wrapper.find(_semanticUiReact.Button).prop('type'));
  });
  describe('Button Input Simulation', function () {
    var clickCallback;
    beforeEach(function () {
      clickCallback = jest.spyOn(wrapper.instance(), 'onClickHandler');
      wrapper.instance().forceUpdate();
      wrapper.find(_semanticUiReact.Button).simulate('click');
    });
    it('should call the onClick fuction handler when it is clicked', function () {
      expect(clickCallback).toHaveBeenCalled();
    });
    it('should call the props onClikHandler function after button is Clicked', function () {
      expect(onClickMock).toHaveBeenCalled();
    });
  });
  describe('Snap Shot Testing', function () {
    it('should create or match previous snapshot of the component', function () {
      expect(wrapper).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbklucHV0LnRlc3QuanMiXSwibmFtZXMiOlsiZXhwZWN0IiwiYWRkU25hcHNob3RTZXJpYWxpemVyIiwiZW56eW1lU2VyaWFsaXplciIsImRlc2NyaWJlIiwid3JhcHBlciIsIm9uQ2xpY2tNb2NrIiwiYmVmb3JlRWFjaCIsImplc3QiLCJmbiIsIm1vdW50IiwiYWZ0ZXJFYWNoIiwidW5tb3VudCIsIml0IiwidG9CZURlZmluZWQiLCJmaW5kIiwidG9IYXZlTGVuZ3RoIiwidGV4dCIsInRvRXF1YWwiLCJwcm9wIiwicHJvcHNUb0NoZWNrIiwiYnV0dG9uSW5wdXRQcm9wc0tleXMiLCJPYmplY3QiLCJrZXlzIiwiQnV0dG9uIiwicHJvcHMiLCJtYXAiLCJyZXFQcm9wIiwiaSIsInRvQ29udGFpbiIsInR5cGVWYWx1ZSIsImNsaWNrQ2FsbGJhY2siLCJzcHlPbiIsImluc3RhbmNlIiwiZm9yY2VVcGRhdGUiLCJzaW11bGF0ZSIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b01hdGNoU25hcHNob3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQUEsTUFBTSxDQUFDQyxxQkFBUCxDQUE2QkMsZ0JBQTdCO0FBQ0FDLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFNO0FBQy9CLE1BQUlDLE9BQUosRUFDSUMsV0FESjtBQUVBQyxFQUFBQSxVQUFVLENBQUUsWUFBTTtBQUNkRCxJQUFBQSxXQUFXLEdBQUdFLElBQUksQ0FBQ0MsRUFBTCxFQUFkO0FBQ0FKLElBQUFBLE9BQU8sR0FBR0ssS0FBSyxDQUFDLGdDQUFDLFlBQUQ7QUFBUyxNQUFBLElBQUksRUFBQyxRQUFkO0FBQXVCLE1BQUEsVUFBVSxFQUFDLFFBQWxDO0FBQTJDLE1BQUEsY0FBYyxFQUFFSjtBQUEzRCxNQUFELENBQWY7QUFDSCxHQUhTLENBQVY7QUFJQUssRUFBQUEsU0FBUyxDQUFDLFlBQUk7QUFDVk4sSUFBQUEsT0FBTyxDQUFDTyxPQUFSO0FBQ0gsR0FGUSxDQUFUO0FB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Q0FBRjtBQUdILEdBZE8sQ0FBUjtBQWVBaEMsRUFBQUEsUUFBUSxDQUFDLG1CQUFELEVBQXFCLFlBQU07QUFDL0JTLElBQUFBLEVBQUUsQ0FBQywyREFBRCxFQUE2RCxZQUFNO0FBQ2pFWixNQUFBQSxNQUFNLENBQUNJLE9BQUQsQ0FBTixDQUFnQmdDLGVBQWhCO0FBQ0gsS0FGQyxDQUFGO0FBR0gsR0FKTyxDQUFSO0FBS0gsQ0FwRk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ0J1dHRvbiBmcm9tICcuLic7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdzZW1hbnRpYy11aS1yZWFjdCc7XG5cbmV4cGVjdC5hZGRTbmFwc2hvdFNlcmlhbGl6ZXIoZW56eW1lU2VyaWFsaXplcik7XG5kZXNjcmliZSgnQnV0dG9uIENvbXBvbmVudCcsICgpID0+IHtcbiAgICBsZXQgd3JhcHBlcixcbiAgICAgICAgb25DbGlja01vY2s7XG4gICAgYmVmb3JlRWFjaCggKCkgPT4ge1xuICAgICAgICBvbkNsaWNrTW9jayA9IGplc3QuZm4oKTtcbiAgICAgICAgd3JhcHBlciA9IG1vdW50KDxDQnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBidXR0b25OYW1lPVwiU3VibWl0XCIgb25DbGlja0hhbmRsZXI9e29uQ2xpY2tNb2NrfT48L0NCdXR0b24+KVxuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKT0+e1xuICAgICAgICB3cmFwcGVyLnVubW91bnQoKVxuICAgIH0pO1xuICAgIFxuICAgIGl0KCAnc2hvdWxkIGJlIGRlZmluZWQnICwgKCkgPT4ge1xuICAgICAgIGV4cGVjdCh3cmFwcGVyKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCAnc2hvdWxkIGhhdmUgb25seSBvbmUgYnV0dG9uJyAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnYnV0dG9uJykpLnRvSGF2ZUxlbmd0aCgxKVxuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgc2hvdyBuYW1lIG9mIHRoZSBidXR0b24nLCgpPT57XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2J1dHRvbicpLnRleHQoKSkudG9FcXVhbCh3cmFwcGVyLnByb3AoJ2J1dHRvbk5hbWUnKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkICBoYXZlIHRoZSBleGFjdGx5IGdpdmVuIHByb3BzIHByb3BzJywoKT0+e1xuICAgICAgICBjb25zdCBwcm9wc1RvQ2hlY2sgPSBcbiAgICAgICAgWydpZCcsXG4gICAgICAgICd0eXBlJyxcbiAgICAgICAgJ2FjdGl2ZScsXG4gICAgICAgICdhbmltYXRlZCcsXG4gICAgICAgICdhcycsXG4gICAgICAgICdhdHRhY2hlZCcsXG4gICAgICAgICdiYXNpYycsXG4gICAgICAgICdjaGlsZHJlbicsXG4gICAgICAgICdjaXJjdWxhcicsXG4gICAgICAgICdjbGFzc05hbWUnLCBcbiAgICAgICAgJ2NvbG9yJyxcbiAgICAgICAgJ2NvbXBhY3QnLFxuICAgICAgICAnY29udGVudCcsXG4gICAgICAgICdkaXNhYmxlZCcsXG4gICAgICAgICdmbG9hdGVkJyxcbiAgICAgICAgJ2ZsdWlkJyxcbiAgICAgICAgJ2ljb24nLFxuICAgICAgICAnaW52ZXJ0ZWQnLFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICAnbGFiZWxQb3NpdGlvbicsXG4gICAgICAgICdsb2FkaW5nJyxcbiAgICAgICAgJ25lZ2F0aXZlJyxcbiAgICAgICAgJ29uQ2xpY2snLFxuICAgICAgICAncG9zaXRpdmUnLFxuICAgICAgICAncHJpbWFyeScsXG4gICAgICAgICdyb2xlJyxcbiAgICAgICAgJ3NlY29uZGFyeScsXG4gICAgICAgICdzaXplJyxcbiAgICAgICAgJ3RhYkluZGV4JyxcbiAgICAgICAgJ3RvZ2dsZSddO1xuICAgICAgICBsZXQgYnV0dG9uSW5wdXRQcm9wc0tleXM9T2JqZWN0LmtleXMod3JhcHBlci5maW5kKEJ1dHRvbikucHJvcHMoKSk7XG4gICAgICAgIHByb3BzVG9DaGVjay5tYXAoKHJlcVByb3AsaSk9PntcbiAgICAgICAgICAgIGV4cGVjdChwcm9wc1RvQ2hlY2spLnRvQ29udGFpbihidXR0b25JbnB1dFByb3BzS2V5c1tpXSk7XG4gICAgICAgIH0pICAgICAgICBcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG9ubHkgaGF2ZSB0eXBlIG9mIHN1Ym1pdCBvciBidXR0b24nLCAoKT0+e1xuICAgICBjb25zdCB0eXBlVmFsdWUgPVsnc3VibWl0JywnYnV0dG9uJ107XG4gICAgIGV4cGVjdCh0eXBlVmFsdWUpLnRvQ29udGFpbih3cmFwcGVyLmZpbmQoQnV0dG9uKS5wcm9wKCd0eXBlJykpXG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ0J1dHRvbiBJbnB1dCBTaW11bGF0aW9uJywoKT0+e1xuICAgICAgICBsZXQgY2xpY2tDYWxsYmFjaztcbiAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICBjbGlja0NhbGxiYWNrID0gamVzdC5zcHlPbih3cmFwcGVyLmluc3RhbmNlKCksJ29uQ2xpY2tIYW5kbGVyJyk7XG4gICAgICAgICAgICB3cmFwcGVyLmluc3RhbmNlKCkuZm9yY2VVcGRhdGUoKTsgXG4gICAgICAgICAgICB3cmFwcGVyLmZpbmQoQnV0dG9uKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIG9uQ2xpY2sgZnVjdGlvbiBoYW5kbGVyIHdoZW4gaXQgaXMgY2xpY2tlZCcsKCkgPT4ge1xuICAgICAgICAgZXhwZWN0KGNsaWNrQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgY2FsbCB0aGUgcHJvcHMgb25DbGlrSGFuZGxlciBmdW5jdGlvbiBhZnRlciBidXR0b24gaXMgQ2xpY2tlZCcsKCkgPT57XG4gICAgICAgICAgZXhwZWN0KG9uQ2xpY2tNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1NuYXAgU2hvdCBUZXN0aW5nJywoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIG9yIG1hdGNoIHByZXZpb3VzIHNuYXBzaG90IG9mIHRoZSBjb21wb25lbnQnLCgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCh3cmFwcGVyKS50b01hdGNoU25hcHNob3QoKTsgXG4gICAgICAgIH0pO1xuICAgIH0pXG59KTsiXX0=