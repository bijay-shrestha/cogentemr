2c827556163ed436c4c674b5a19769b5
'use strict';

var path = require('path');

var fs = require('fs');

var url = require('url'); // Make sure any symlinks in the project folder are resolved:
// https://github.com/facebook/create-react-app/issues/637


var appDirectory = fs.realpathSync(process.cwd());

var resolveApp = function resolveApp(relativePath) {
  return path.resolve(appDirectory, relativePath);
};

var envPublicUrl = process.env.PUBLIC_URL;

function ensureSlash(inputPath, needsSlash) {
  var hasSlash = inputPath.endsWith('/');

  if (hasSlash && !needsSlash) {
    return inputPath.substr(0, inputPath.length - 1);
  } else if (!hasSlash && needsSlash) {
    return "".concat(inputPath, "/");
  } else {
    return inputPath;
  }
}

var getPublicUrl = function getPublicUrl(appPackageJson) {
  return envPublicUrl || require(appPackageJson).homepage;
}; // We use `PUBLIC_URL` environment variable or "homepage" field to infer
// "public path" at which the app is served.
// Webpack needs to know it to put the right <script> hrefs into HTML even in
// single-page apps that may serve index.html for nested URLs like /todos/42.
// We can't use a relative path in HTML because we don't want to load something
// like /todos/42/static/js/bundle.7289d.js. We have to know the root.


function getServedPath(appPackageJson) {
  var publicUrl = getPublicUrl(appPackageJson);
  var servedUrl = envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');
  return ensureSlash(servedUrl, true);
}

var moduleFileExtensions = ['web.mjs', 'mjs', 'web.js', 'js', 'web.ts', 'ts', 'web.tsx', 'tsx', 'json', 'web.jsx', 'jsx']; // Resolve file paths in the same order as webpack

var resolveModule = function resolveModule(resolveFn, filePath) {
  var extension = moduleFileExtensions.find(function (extension) {
    return fs.existsSync(resolveFn("".concat(filePath, ".").concat(extension)));
  });

  if (extension) {
    return resolveFn("".concat(filePath, ".").concat(extension));
  }

  return resolveFn("".concat(filePath, ".js"));
}; // config after eject: we're in ./config/


module.exports = {
  dotenv: resolveApp('.env'),
  appPath: resolveApp('.'),
  appBuild: resolveApp('build'),
  appPublic: resolveApp('public'),
  appHtml: resolveApp('public/index.html'),
  appIndexJs: resolveModule(resolveApp, 'src/index'),
  appPackageJson: resolveApp('package.json'),
  appSrc: resolveApp('src'),
  appTsConfig: resolveApp('tsconfig.json'),
  appJsConfig: resolveApp('jsconfig.json'),
  yarnLockFile: resolveApp('yarn.lock'),
  testsSetup: resolveModule(resolveApp, 'src/setupTests'),
  proxySetup: resolveApp('src/setupProxy.js'),
  appNodeModules: resolveApp('node_modules'),
  publicUrl: getPublicUrl(resolveApp('package.json')),
  servedPath: getServedPath(resolveApp('package.json'))
};
module.exports.moduleFileExtensions = moduleFileExtensions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGhzLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZnMiLCJ1cmwiLCJhcHBEaXJlY3RvcnkiLCJyZWFscGF0aFN5bmMiLCJwcm9jZXNzIiwiY3dkIiwicmVzb2x2ZUFwcCIsInJlbGF0aXZlUGF0aCIsInJlc29sdmUiLCJlbnZQdWJsaWNVcmwiLCJlbnYiLCJQVUJMSUNfVVJMIiwiZW5zdXJlU2xhc2giLCJpbnB1dFBhdGgiLCJuZWVkc1NsYXNoIiwiaGFzU2xhc2giLCJlbmRzV2l0aCIsInN1YnN0ciIsImxlbmd0aCIsImdldFB1YmxpY1VybCIsImFwcFBhY2thZ2VKc29uIiwiaG9tZXBhZ2UiLCJnZXRTZXJ2ZWRQYXRoIiwicHVibGljVXJsIiwic2VydmVkVXJsIiwicGFyc2UiLCJwYXRobmFtZSIsIm1vZHVsZUZpbGVFeHRlbnNpb25zIiwicmVzb2x2ZU1vZHVsZSIsInJlc29sdmVGbiIsImZpbGVQYXRoIiwiZXh0ZW5zaW9uIiwiZmluZCIsImV4aXN0c1N5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG90ZW52IiwiYXBwUGF0aCIsImFwcEJ1aWxkIiwiYXBwUHVibGljIiwiYXBwSHRtbCIsImFwcEluZGV4SnMiLCJhcHBTcmMiLCJhcHBUc0NvbmZpZyIsImFwcEpzQ29uZmlnIiwieWFybkxvY2tGaWxlIiwidGVzdHNTZXR1cCIsInByb3h5U2V0dXAiLCJhcHBOb2RlTW9kdWxlcyIsInNlcnZlZFBhdGgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsSUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxLQUFELENBQW5CLEMsQ0FFQTtBQUNBOzs7QUFDQSxJQUFNRyxZQUFZLEdBQUdGLEVBQUUsQ0FBQ0csWUFBSCxDQUFnQkMsT0FBTyxDQUFDQyxHQUFSLEVBQWhCLENBQXJCOztBQUNB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LFVBQVUsQ0FBQyxlQUFELENBVFI7QUFVZnNDLEVBQUFBLFdBQVcsRUFBRXRDLFVBQVUsQ0FBQyxlQUFELENBVlI7QUFXZnVDLEVBQUFBLFlBQVksRUFBRXZDLFVBQVUsQ0FBQyxXQUFELENBWFQ7QUFZZndDLEVBQUFBLFVBQVUsRUFBRWxCLGFBQWEsQ0FBQ3RCLFVBQUQsRUFBYSxnQkFBYixDQVpWO0FBYWZ5QyxFQUFBQSxVQUFVLEVBQUV6QyxVQUFVLENBQUMsbUJBQUQsQ0FiUDtBQWNmMEMsRUFBQUEsY0FBYyxFQUFFMUMsVUFBVSxDQUFDLGNBQUQsQ0FkWDtBQWVmaUIsRUFBQUEsU0FBUyxFQUFFSixZQUFZLENBQUNiLFVBQVUsQ0FBQyxjQUFELENBQVgsQ0FmUjtBQWdCZjJDLEVBQUFBLFVBQVUsRUFBRTNCLGFBQWEsQ0FBQ2hCLFVBQVUsQ0FBQyxjQUFELENBQVg7QUFoQlYsQ0FBakI7QUFxQkE0QixNQUFNLENBQUNDLE9BQVAsQ0FBZVIsb0JBQWYsR0FBc0NBLG9CQUF0QyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG4vLyBNYWtlIHN1cmUgYW55IHN5bWxpbmtzIGluIHRoZSBwcm9qZWN0IGZvbGRlciBhcmUgcmVzb2x2ZWQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvNjM3XG5jb25zdCBhcHBEaXJlY3RvcnkgPSBmcy5yZWFscGF0aFN5bmMocHJvY2Vzcy5jd2QoKSk7XG5jb25zdCByZXNvbHZlQXBwID0gcmVsYXRpdmVQYXRoID0+IHBhdGgucmVzb2x2ZShhcHBEaXJlY3RvcnksIHJlbGF0aXZlUGF0aCk7XG5cbmNvbnN0IGVudlB1YmxpY1VybCA9IHByb2Nlc3MuZW52LlBVQkxJQ19VUkw7XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoKGlucHV0UGF0aCwgbmVlZHNTbGFzaCkge1xuICBjb25zdCBoYXNTbGFzaCA9IGlucHV0UGF0aC5lbmRzV2l0aCgnLycpO1xuICBpZiAoaGFzU2xhc2ggJiYgIW5lZWRzU2xhc2gpIHtcbiAgICByZXR1cm4gaW5wdXRQYXRoLnN1YnN0cigwLCBpbnB1dFBhdGgubGVuZ3RoIC0gMSk7XG4gIH0gZWxzZSBpZiAoIWhhc1NsYXNoICYmIG5lZWRzU2xhc2gpIHtcbiAgICByZXR1cm4gYCR7aW5wdXRQYXRofS9gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dFBhdGg7XG4gIH1cbn1cblxuY29uc3QgZ2V0UHVibGljVXJsID0gYXBwUGFja2FnZUpzb24gPT5cbiAgZW52UHVibGljVXJsIHx8IHJlcXVpcmUoYXBwUGFja2FnZUpzb24pLmhvbWVwYWdlO1xuXG4vLyBXZSB1c2UgYFBVQkxJQ19VUkxgIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIFwiaG9tZXBhZ2VcIiBmaWVsZCB0byBpbmZlclxuLy8gXCJwdWJsaWMgcGF0aFwiIGF0IHdoaWNoIHRoZSBhcHAgaXMgc2VydmVkLlxuLy8gV2VicGFjayBuZWVkcyB0byBrbm93IGl0IHRvIHB1dCB0aGUgcmlnaHQgPHNjcmlwdD4gaHJlZnMgaW50byBIVE1MIGV2ZW4gaW5cbi8vIHNpbmdsZS1wYWdlIGFwcHMgdGhhdCBtYXkgc2VydmUgaW5kZXguaHRtbCBmb3IgbmVzdGVkIFVSTHMgbGlrZSAvdG9kb3MvNDIuXG4vLyBXZSBjYW4ndCB1c2UgYSByZWxhdGl2ZSBwYXRoIGluIEhUTUwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGxvYWQgc29tZXRoaW5nXG4vLyBsaWtlIC90b2Rvcy80Mi9zdGF0aWMvanMvYnVuZGxlLjcyODlkLmpzLiBXZSBoYXZlIHRvIGtub3cgdGhlIHJvb3QuXG5mdW5jdGlvbiBnZXRTZXJ2ZWRQYXRoKGFwcFBhY2thZ2VKc29uKSB7XG4gIGNvbnN0IHB1YmxpY1VybCA9IGdldFB1YmxpY1VybChhcHBQYWNrYWdlSnNvbik7XG4gIGNvbnN0IHNlcnZlZFVybCA9XG4gICAgZW52UHVibGljVXJsIHx8IChwdWJsaWNVcmwgPyB1cmwucGFyc2UocHVibGljVXJsKS5wYXRobmFtZSA6ICcvJyk7XG4gIHJldHVybiBlbnN1cmVTbGFzaChzZXJ2ZWRVcmwsIHRydWUpO1xufVxuXG5jb25zdCBtb2R1bGVGaWxlRXh0ZW5zaW9ucyA9IFtcbiAgJ3dlYi5tanMnLFxuICAnbWpzJyxcbiAgJ3dlYi5qcycsXG4gICdqcycsXG4gICd3ZWIudHMnLFxuICAndHMnLFxuICAnd2ViLnRzeCcsXG4gICd0c3gnLFxuICAnanNvbicsXG4gICd3ZWIuanN4JyxcbiAgJ2pzeCcsXG5dO1xuXG4vLyBSZXNvbHZlIGZpbGUgcGF0aHMgaW4gdGhlIHNhbWUgb3JkZXIgYXMgd2VicGFja1xuY29uc3QgcmVzb2x2ZU1vZHVsZSA9IChyZXNvbHZlRm4sIGZpbGVQYXRoKSA9PiB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IG1vZHVsZUZpbGVFeHRlbnNpb25zLmZpbmQoZXh0ZW5zaW9uID0+XG4gICAgZnMuZXhpc3RzU3luYyhyZXNvbHZlRm4oYCR7ZmlsZVBhdGh9LiR7ZXh0ZW5zaW9ufWApKVxuICApO1xuXG4gIGlmIChleHRlbnNpb24pIHtcbiAgICByZXR1cm4gcmVzb2x2ZUZuKGAke2ZpbGVQYXRofS4ke2V4dGVuc2lvbn1gKTtcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlRm4oYCR7ZmlsZVBhdGh9LmpzYCk7XG59O1xuXG4vLyBjb25maWcgYWZ0ZXIgZWplY3Q6IHdlJ3JlIGluIC4vY29uZmlnL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvdGVudjogcmVzb2x2ZUFwcCgnLmVudicpLFxuICBhcHBQYXRoOiByZXNvbHZlQXBwKCcuJyksXG4gIGFwcEJ1aWxkOiByZXNvbHZlQXBwKCdidWlsZCcpLFxuICBhcHBQdWJsaWM6IHJlc29sdmVBcHAoJ3B1YmxpYycpLFxuICBhcHBIdG1sOiByZXNvbHZlQXBwKCdwdWJsaWMvaW5kZXguaHRtbCcpLFxuICBhcHBJbmRleEpzOiByZXNvbHZlTW9kdWxlKHJlc29sdmVBcHAsICdzcmMvaW5kZXgnKSxcbiAgYXBwUGFja2FnZUpzb246IHJlc29sdmVBcHAoJ3BhY2thZ2UuanNvbicpLFxuICBhcHBTcmM6IHJlc29sdmVBcHAoJ3NyYycpLFxuICBhcHBUc0NvbmZpZzogcmVzb2x2ZUFwcCgndHNjb25maWcuanNvbicpLFxuICBhcHBKc0NvbmZpZzogcmVzb2x2ZUFwcCgnanNjb25maWcuanNvbicpLFxuICB5YXJuTG9ja0ZpbGU6IHJlc29sdmVBcHAoJ3lhcm4ubG9jaycpLFxuICB0ZXN0c1NldHVwOiByZXNvbHZlTW9kdWxlKHJlc29sdmVBcHAsICdzcmMvc2V0dXBUZXN0cycpLFxuICBwcm94eVNldHVwOiByZXNvbHZlQXBwKCdzcmMvc2V0dXBQcm94eS5qcycpLFxuICBhcHBOb2RlTW9kdWxlczogcmVzb2x2ZUFwcCgnbm9kZV9tb2R1bGVzJyksXG4gIHB1YmxpY1VybDogZ2V0UHVibGljVXJsKHJlc29sdmVBcHAoJ3BhY2thZ2UuanNvbicpKSxcbiAgc2VydmVkUGF0aDogZ2V0U2VydmVkUGF0aChyZXNvbHZlQXBwKCdwYWNrYWdlLmpzb24nKSksXG59O1xuXG5cblxubW9kdWxlLmV4cG9ydHMubW9kdWxlRmlsZUV4dGVuc2lvbnMgPSBtb2R1bGVGaWxlRXh0ZW5zaW9ucztcbiJdfQ==