16fc1c2da9f589478143f61b78e3f687
'use strict'; // Do this as the first thing so that any code reading it knows the right env.

process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';
process.env.PUBLIC_URL = ''; // Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.

process.on('unhandledRejection', function (err) {
  throw err;
}); // Ensure environment variables are read.

require('../config/env');

var jest = require('jest');

var execSync = require('child_process').execSync;

var argv = process.argv.slice(2);

function isInGitRepository() {
  try {
    execSync('git rev-parse --is-inside-work-tree', {
      stdio: 'ignore'
    });
    return true;
  } catch (e) {
    return false;
  }
}

function isInMercurialRepository() {
  try {
    execSync('hg --cwd . root', {
      stdio: 'ignore'
    });
    return true;
  } catch (e) {
    return false;
  }
} // Watch unless on CI or explicitly running all tests


if (!process.env.CI && argv.indexOf('--watchAll') === -1) {
  // https://github.com/facebook/create-react-app/issues/5210
  var hasSourceControl = isInGitRepository() || isInMercurialRepository();
  argv.push(hasSourceControl ? '--watch' : '--watchAll');
}

jest.run(argv);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIkJBQkVMX0VOViIsIk5PREVfRU5WIiwiUFVCTElDX1VSTCIsIm9uIiwiZXJyIiwicmVxdWlyZSIsImplc3QiLCJleGVjU3luYyIsImFyZ3YiLCJzbGljZSIsImlzSW5HaXRSZXBvc2l0b3J5Iiwic3RkaW8iLCJlIiwiaXNJbk1lcmN1cmlhbFJlcG9zaXRvcnkiLCJDSSIsImluZGV4T2YiLCJoYXNTb3VyY2VDb250cm9sIiwicHVzaCIsInJ1biJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUVBOztBQUNBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBWixHQUF3QixhQUF4QjtBQUNBRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsUUFBWixHQUF1QixhQUF2QjtBQUNBSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsVUFBWixHQUF5QixFQUF6QixDLENBRUE7QUFDQTtBQUNBOztBQUNBSixPQUFPLENBQUNLLEVBQVIsQ0FBVyxvQkFBWCxFQUFpQyxVQUFBQyxHQUFHLEVBQUk7QUFDdEMsUUFBTUEsR0FBTjtBQUNELENBRkQsRSxDQUlBOztBQUNBQyxPQUFPLENBQUMsZUFBRCxDQUFQOztBQUdBLElBQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUFQLENBQXlCRSxRQUExQzs7QUFDQSxJQUFJQyxJQUFJLEdBQUdWLE9BQU8sQ0FBQ1UsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQVg7O0FBRUEsU0FBU0MsaUJBQVQsR0FBNkI7QUFDM0IsTUFBSTtBQUNGSCxJQUFBQSxRQUFRLENBQUMscUNBQUQsRUFBd0M7QUFBRUksTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBeEMsQ0FBUjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixXQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNDLHVCQUFULEdBQW1DO0FBQ2pDLE1BQUk7QUFDRk4sSUFBQUEsUUFBUSxDQUFDLGlCQUFELEVBQW9CO0FBQUVJLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQXBCLENBQVI7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBTyxLQUFQO0FBQ0Q7QUFDRixDLENBRUQ7OztBQUNBLElBQ0UsQ0FBQ2QsT0FBTyxDQUFDQyxHQUFSLENBQVllLEVBQWIsSUFDQU4sSUFBSSxDQUFDTyxPQUFMLENBQWEsWUFBYixNQUErQixDQUFDLENBRmxDLEVBR0U7QUFDQTtBQUNBLE1BQU1DLGdCQUFnQixHQUFHTixpQkFBaUIsTUFBTUcsdUJBQXVCLEVBQXZFO0FBQ0FMLEVBQUFBLElBQUksQ0FBQ1MsSUFBTCxDQUFVRCxnQkFBZ0IsR0FBRyxTQUFILEdBQWUsWUFBekM7QUFDRDs7QUFHRFYsSUFBSSxDQUFDWSxHQUFMLENBQVNWLElBQVQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIERvIHRoaXMgYXMgdGhlIGZpcnN0IHRoaW5nIHNvIHRoYXQgYW55IGNvZGUgcmVhZGluZyBpdCBrbm93cyB0aGUgcmlnaHQgZW52LlxucHJvY2Vzcy5lbnYuQkFCRUxfRU5WID0gJ2RldmVsb3BtZW50JztcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ2RldmVsb3BtZW50JztcbnByb2Nlc3MuZW52LlBVQkxJQ19VUkwgPSAnJztcblxuLy8gTWFrZXMgdGhlIHNjcmlwdCBjcmFzaCBvbiB1bmhhbmRsZWQgcmVqZWN0aW9ucyBpbnN0ZWFkIG9mIHNpbGVudGx5XG4vLyBpZ25vcmluZyB0aGVtLiBJbiB0aGUgZnV0dXJlLCBwcm9taXNlIHJlamVjdGlvbnMgdGhhdCBhcmUgbm90IGhhbmRsZWQgd2lsbFxuLy8gdGVybWluYXRlIHRoZSBOb2RlLmpzIHByb2Nlc3Mgd2l0aCBhIG5vbi16ZXJvIGV4aXQgY29kZS5cbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGVyciA9PiB7XG4gIHRocm93IGVycjtcbn0pO1xuXG4vLyBFbnN1cmUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSByZWFkLlxucmVxdWlyZSgnLi4vY29uZmlnL2VudicpO1xuXG5cbmNvbnN0IGplc3QgPSByZXF1aXJlKCdqZXN0Jyk7XG5jb25zdCBleGVjU3luYyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5leGVjU3luYztcbmxldCBhcmd2ID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5mdW5jdGlvbiBpc0luR2l0UmVwb3NpdG9yeSgpIHtcbiAgdHJ5IHtcbiAgICBleGVjU3luYygnZ2l0IHJldi1wYXJzZSAtLWlzLWluc2lkZS13b3JrLXRyZWUnLCB7IHN0ZGlvOiAnaWdub3JlJyB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luTWVyY3VyaWFsUmVwb3NpdG9yeSgpIHtcbiAgdHJ5IHtcbiAgICBleGVjU3luYygnaGcgLS1jd2QgLiByb290JywgeyBzdGRpbzogJ2lnbm9yZScgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gV2F0Y2ggdW5sZXNzIG9uIENJIG9yIGV4cGxpY2l0bHkgcnVubmluZyBhbGwgdGVzdHNcbmlmIChcbiAgIXByb2Nlc3MuZW52LkNJICYmXG4gIGFyZ3YuaW5kZXhPZignLS13YXRjaEFsbCcpID09PSAtMVxuKSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9jcmVhdGUtcmVhY3QtYXBwL2lzc3Vlcy81MjEwXG4gIGNvbnN0IGhhc1NvdXJjZUNvbnRyb2wgPSBpc0luR2l0UmVwb3NpdG9yeSgpIHx8IGlzSW5NZXJjdXJpYWxSZXBvc2l0b3J5KCk7XG4gIGFyZ3YucHVzaChoYXNTb3VyY2VDb250cm9sID8gJy0td2F0Y2gnIDogJy0td2F0Y2hBbGwnKTtcbn1cblxuXG5qZXN0LnJ1bihhcmd2KTtcbiJdfQ==