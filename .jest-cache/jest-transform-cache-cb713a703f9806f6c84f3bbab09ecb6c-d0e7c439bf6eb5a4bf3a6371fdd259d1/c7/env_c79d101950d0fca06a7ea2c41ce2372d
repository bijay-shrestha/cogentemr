32285235dc294d47f7110761381d3658
'use strict';

/* istanbul ignore next */
var cov_13jzbjualu = function () {
  var path = "/Users/bijayshrestha/Dropbox/Workspaces/cogentemr/packages/apps/admin/config/env.js";
  var hash = "04f92680425e5a3ee0887d69fcb27722cea37bc6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/bijayshrestha/Dropbox/Workspaces/cogentemr/packages/apps/admin/config/env.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 11
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "1": {
        start: {
          line: 4,
          column: 13
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "2": {
        start: {
          line: 5,
          column: 14
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "4": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 37
        }
      },
      "5": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "6": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 14,
          column: 4
        }
      },
      "7": {
        start: {
          line: 18,
          column: 18
        },
        end: {
          line: 26,
          column: 17
        }
      },
      "8": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "9": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 39,
          column: 6
        }
      },
      "11": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 52,
          column: 51
        }
      },
      "12": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 57,
          column: 24
        }
      },
      "13": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 54
        }
      },
      "14": {
        start: {
          line: 56,
          column: 17
        },
        end: {
          line: 56,
          column: 51
        }
      },
      "15": {
        start: {
          line: 61,
          column: 18
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "16": {
        start: {
          line: 64,
          column: 14
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "17": {
        start: {
          line: 65,
          column: 19
        },
        end: {
          line: 65,
          column: 38
        }
      },
      "18": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 36
        }
      },
      "19": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "20": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 88,
          column: 3
        }
      },
      "21": {
        start: {
          line: 85,
          column: 6
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "22": {
        start: {
          line: 86,
          column: 6
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "23": {
        start: {
          line: 90,
          column: 2
        },
        end: {
          line: 90,
          column: 30
        }
      },
      "24": {
        start: {
          line: 93,
          column: 0
        },
        end: {
          line: 93,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 33,
            column: 21
          }
        },
        loc: {
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 33
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 55,
            column: 10
          },
          end: {
            line: 55,
            column: 11
          }
        },
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 54
          }
        },
        line: 55
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 7
          },
          end: {
            line: 56,
            column: 8
          }
        },
        loc: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 51
          }
        },
        line: 56
      },
      "3": {
        name: "getClientEnvironment",
        decl: {
          start: {
            line: 63,
            column: 9
          },
          end: {
            line: 63,
            column: 29
          }
        },
        loc: {
          start: {
            line: 63,
            column: 41
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        loc: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 38
          }
        },
        line: 65
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        loc: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 70,
            column: 7
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 43
          },
          end: {
            line: 84,
            column: 44
          }
        },
        loc: {
          start: {
            line: 84,
            column: 57
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 84
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 11,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 24,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 24,
            column: 21
          }
        }, {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 48
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 46
          }
        }, {
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 53,
            column: 52
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 26
          }
        }, {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 54
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 18
          },
          end: {
            line: 74,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 18
          },
          end: {
            line: 74,
            column: 38
          }
        }, {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 74,
            column: 55
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "04f92680425e5a3ee0887d69fcb27722cea37bc6"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var fs =
/* istanbul ignore next */
(cov_13jzbjualu.s[0]++, require('fs'));
var path =
/* istanbul ignore next */
(cov_13jzbjualu.s[1]++, require('path'));
var paths =
/* istanbul ignore next */
(cov_13jzbjualu.s[2]++, require('./paths')); // Make sure that including paths.js after env.js will read .env variables.

/* istanbul ignore next */
cov_13jzbjualu.s[3]++;
delete require.cache[require.resolve('./paths')];
var NODE_ENV =
/* istanbul ignore next */
(cov_13jzbjualu.s[4]++, process.env.NODE_ENV);

/* istanbul ignore next */
cov_13jzbjualu.s[5]++;

if (!NODE_ENV) {
  /* istanbul ignore next */
  cov_13jzbjualu.b[0][0]++;
  cov_13jzbjualu.s[6]++;
  throw new Error('The NODE_ENV environment variable is required but was not specified.');
} else
/* istanbul ignore next */
{
  cov_13jzbjualu.b[0][1]++;
} // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use


var dotenvFiles =
/* istanbul ignore next */
(cov_13jzbjualu.s[7]++, [
/* istanbul ignore next */
"".concat(paths.dotenv, ".").concat(NODE_ENV, ".local"),
/* istanbul ignore next */
"".concat(paths.dotenv, ".").concat(NODE_ENV), // Don't include `.env.local` for `test` environment
// since normally you expect tests to produce the same
// results for everyone

/* istanbul ignore next */
(cov_13jzbjualu.b[1][0]++, NODE_ENV !== 'test') &&
/* istanbul ignore next */
(cov_13jzbjualu.b[1][1]++, "".concat(paths.dotenv, ".local")), paths.dotenv].filter(Boolean)); // Load environment variables from .env* files. Suppress warnings using silent
// if this file is missing. dotenv will never modify any environment variables
// that have already been set.  Variable expansion is supported in .env files.
// https://github.com/motdotla/dotenv
// https://github.com/motdotla/dotenv-expand

/* istanbul ignore next */
cov_13jzbjualu.s[8]++;
dotenvFiles.forEach(function (dotenvFile) {
  /* istanbul ignore next */
  cov_13jzbjualu.f[0]++;
  cov_13jzbjualu.s[9]++;

  if (fs.existsSync(dotenvFile)) {
    /* istanbul ignore next */
    cov_13jzbjualu.b[2][0]++;
    cov_13jzbjualu.s[10]++;

    require('dotenv-expand')(require('dotenv').config({
      path: dotenvFile
    }));
  } else
  /* istanbul ignore next */
  {
    cov_13jzbjualu.b[2][1]++;
  }
}); // We support resolving modules according to `NODE_PATH`.
// This lets you use absolute paths in imports inside large monorepos:
// https://github.com/facebook/create-react-app/issues/253.
// It works similar to `NODE_PATH` in Node itself:
// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders
// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.
// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.
// https://github.com/facebook/create-react-app/issues/1023#issuecomment-265344421
// We also resolve them to make sure all tools using them work consistently.

var appDirectory =
/* istanbul ignore next */
(cov_13jzbjualu.s[11]++, fs.realpathSync(process.cwd()));

/* istanbul ignore next */
cov_13jzbjualu.s[12]++;
process.env.NODE_PATH = (
/* istanbul ignore next */
(cov_13jzbjualu.b[3][0]++, process.env.NODE_PATH) ||
/* istanbul ignore next */
(cov_13jzbjualu.b[3][1]++, '')).split(path.delimiter).filter(function (folder) {
  /* istanbul ignore next */
  cov_13jzbjualu.f[1]++;
  cov_13jzbjualu.s[13]++;
  return (
    /* istanbul ignore next */
    (cov_13jzbjualu.b[4][0]++, folder) &&
    /* istanbul ignore next */
    (cov_13jzbjualu.b[4][1]++, !path.isAbsolute(folder))
  );
}).map(function (folder) {
  /* istanbul ignore next */
  cov_13jzbjualu.f[2]++;
  cov_13jzbjualu.s[14]++;
  return path.resolve(appDirectory, folder);
}).join(path.delimiter); // Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be
// injected into the application via DefinePlugin in Webpack configuration.

var REACT_APP =
/* istanbul ignore next */
(cov_13jzbjualu.s[15]++, /^REACT_APP_/i);

function getClientEnvironment(publicUrl) {
  /* istanbul ignore next */
  cov_13jzbjualu.f[3]++;
  var raw =
  /* istanbul ignore next */
  (cov_13jzbjualu.s[16]++, Object.keys(process.env).filter(function (key) {
    /* istanbul ignore next */
    cov_13jzbjualu.f[4]++;
    cov_13jzbjualu.s[17]++;
    return REACT_APP.test(key);
  }).reduce(function (env, key) {
    /* istanbul ignore next */
    cov_13jzbjualu.f[5]++;
    cov_13jzbjualu.s[18]++;
    env[key] = process.env[key];

    /* istanbul ignore next */
    cov_13jzbjualu.s[19]++;
    return env;
  }, {
    // Useful for determining whether we’re running in production mode.
    // Most importantly, it switches React into the correct mode.
    NODE_ENV:
    /* istanbul ignore next */
    (cov_13jzbjualu.b[5][0]++, process.env.NODE_ENV) ||
    /* istanbul ignore next */
    (cov_13jzbjualu.b[5][1]++, 'development'),
    // Useful for resolving the correct path to static assets in `public`.
    // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.
    // This should only be used as an escape hatch. Normally you would put
    // images into the `src` and `import` them in code to get their paths.
    PUBLIC_URL: publicUrl
  })); // Stringify all values so we can feed into Webpack DefinePlugin

  var stringified =
  /* istanbul ignore next */
  (cov_13jzbjualu.s[20]++, {
    'process.env': Object.keys(raw).reduce(function (env, key) {
      /* istanbul ignore next */
      cov_13jzbjualu.f[6]++;
      cov_13jzbjualu.s[21]++;
      env[key] = JSON.stringify(raw[key]);

      /* istanbul ignore next */
      cov_13jzbjualu.s[22]++;
      return env;
    }, {})
  });

  /* istanbul ignore next */
  cov_13jzbjualu.s[23]++;
  return {
    raw: raw,
    stringified: stringified
  };
}

/* istanbul ignore next */
cov_13jzbjualu.s[24]++;
module.exports = getClientEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,