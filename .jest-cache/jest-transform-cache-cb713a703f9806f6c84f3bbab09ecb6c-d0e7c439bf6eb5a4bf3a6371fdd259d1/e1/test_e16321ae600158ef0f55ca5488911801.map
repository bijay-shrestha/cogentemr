{"version":3,"sources":["test.js"],"names":["it","div","document","createElement","ReactDOM","render","unmountComponentAtNode","process","env","BABEL_ENV","NODE_ENV","PUBLIC_URL","on","err","require","jest","execSync","argv","slice","isInGitRepository","stdio","e","isInMercurialRepository","CI","indexOf","hasSourceControl","push","run"],"mappings":"AAAA;;;;AACA;;AACA;;AACA;;AAEAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACtC,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;;AACAC,uBAASC,MAAT,CAAgB,gCAAC,qBAAD,OAAhB,EAA4BJ,GAA5B;;AACAG,uBAASE,sBAAT,CAAgCL,GAAhC;AACD,CAJC,CAAF,C,CAMA;;AACAM,OAAO,CAACC,GAAR,CAAYC,SAAZ,GAAwB,MAAxB;AACAF,OAAO,CAACC,GAAR,CAAYE,QAAZ,GAAuB,MAAvB;AACAH,OAAO,CAACC,GAAR,CAAYG,UAAZ,GAAyB,EAAzB,C,CAEA;AACA;AACA;;AACAJ,OAAO,CAACK,EAAR,CAAW,oBAAX,EAAiC,UAAAC,GAAG,EAAI;AACtC,QAAMA,GAAN;AACD,CAFD,E,CAIA;;AACAC,OAAO,CAAC,eAAD,CAAP;;AAGA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,QAA1C;;AACA,IAAIC,IAAI,GAAGV,OAAO,CAACU,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX;;AAEA,SAASC,iBAAT,GAA6B;AAC3B,MAAI;AACFH,IAAAA,QAAQ,CAAC,qCAAD,EAAwC;AAAEI,MAAAA,KAAK,EAAE;AAAT,KAAxC,CAAR;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,SAASC,uBAAT,GAAmC;AACjC,MAAI;AACFN,IAAAA,QAAQ,CAAC,iBAAD,EAAoB;AAAEI,MAAAA,KAAK,EAAE;AAAT,KAApB,CAAR;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,C,CAED;;;AACA,IACE,CAACd,OAAO,CAACC,GAAR,CAAYe,EAAb,IACAN,IAAI,CAACO,OAAL,CAAa,YAAb,MAA+B,CAAC,CAFlC,EAGE;AACA;AACA,MAAMC,gBAAgB,GAAGN,iBAAiB,MAAMG,uBAAuB,EAAvE;AACAL,EAAAA,IAAI,CAACS,IAAL,CAAUD,gBAAgB,GAAG,SAAH,GAAe,YAAzC;AACD;;AAGDV,IAAI,CAACY,GAAL,CAASV,IAAT","sourcesContent":["'use strict';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CButton} from '@cogentemr/ui-components';\n\nit('dummy test without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<CButton/>, div);\n  ReactDOM.unmountComponentAtNode(div);\n});\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'test';\nprocess.env.NODE_ENV = 'test';\nprocess.env.PUBLIC_URL = '';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n\n\nconst jest = require('jest');\nconst execSync = require('child_process').execSync;\nlet argv = process.argv.slice(2);\n\nfunction isInGitRepository() {\n  try {\n    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isInMercurialRepository() {\n  try {\n    execSync('hg --cwd . root', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Watch unless on CI or explicitly running all tests\nif (\n  !process.env.CI &&\n  argv.indexOf('--watchAll') === -1\n) {\n  // https://github.com/facebook/create-react-app/issues/5210\n  const hasSourceControl = isInGitRepository() || isInMercurialRepository();\n  argv.push(hasSourceControl ? '--watch' : '--watchAll');\n}\n\n\njest.run(argv);\n"]}