{"version":3,"sources":["paths.js"],"names":["path","require","fs","url","appDirectory","realpathSync","process","cwd","resolveApp","relativePath","resolve","envPublicUrl","env","PUBLIC_URL","ensureSlash","inputPath","needsSlash","hasSlash","endsWith","substr","length","getPublicUrl","appPackageJson","homepage","getServedPath","publicUrl","servedUrl","parse","pathname","moduleFileExtensions","resolveModule","resolveFn","filePath","extension","find","existsSync","module","exports","dotenv","appPath","appBuild","appPublic","appHtml","appIndexJs","appSrc","appTsConfig","appJsConfig","yarnLockFile","testsSetup","proxySetup","appNodeModules","servedPath"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst fs = require('fs');\nconst url = require('url');\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebook/create-react-app/issues/637\nconst appDirectory = fs.realpathSync(process.cwd());\nconst resolveApp = relativePath => path.resolve(appDirectory, relativePath);\n\nconst envPublicUrl = process.env.PUBLIC_URL;\n\nfunction ensureSlash(inputPath, needsSlash) {\n  const hasSlash = inputPath.endsWith('/');\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return `${inputPath}/`;\n  } else {\n    return inputPath;\n  }\n}\n\nconst getPublicUrl = appPackageJson =>\n  envPublicUrl || require(appPackageJson).homepage;\n\n// We use `PUBLIC_URL` environment variable or \"homepage\" field to infer\n// \"public path\" at which the app is served.\n// Webpack needs to know it to put the right <script> hrefs into HTML even in\n// single-page apps that may serve index.html for nested URLs like /todos/42.\n// We can't use a relative path in HTML because we don't want to load something\n// like /todos/42/static/js/bundle.7289d.js. We have to know the root.\nfunction getServedPath(appPackageJson) {\n  const publicUrl = getPublicUrl(appPackageJson);\n  const servedUrl =\n    envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');\n  return ensureSlash(servedUrl, true);\n}\n\nconst moduleFileExtensions = [\n  'web.mjs',\n  'mjs',\n  'web.js',\n  'js',\n  'web.ts',\n  'ts',\n  'web.tsx',\n  'tsx',\n  'json',\n  'web.jsx',\n  'jsx',\n];\n\n// Resolve file paths in the same order as webpack\nconst resolveModule = (resolveFn, filePath) => {\n  const extension = moduleFileExtensions.find(extension =>\n    fs.existsSync(resolveFn(`${filePath}.${extension}`))\n  );\n\n  if (extension) {\n    return resolveFn(`${filePath}.${extension}`);\n  }\n\n  return resolveFn(`${filePath}.js`);\n};\n\n// config after eject: we're in ./config/\nmodule.exports = {\n  dotenv: resolveApp('.env'),\n  appPath: resolveApp('.'),\n  appBuild: resolveApp('build'),\n  appPublic: resolveApp('public'),\n  appHtml: resolveApp('public/index.html'),\n  appIndexJs: resolveModule(resolveApp, 'src/index'),\n  appPackageJson: resolveApp('package.json'),\n  appSrc: resolveApp('src'),\n  appTsConfig: resolveApp('tsconfig.json'),\n  appJsConfig: resolveApp('jsconfig.json'),\n  yarnLockFile: resolveApp('yarn.lock'),\n  testsSetup: resolveModule(resolveApp, 'src/setupTests'),\n  proxySetup: resolveApp('src/setupProxy.js'),\n  appNodeModules: resolveApp('node_modules'),\n  publicUrl: getPublicUrl(resolveApp('package.json')),\n  servedPath: getServedPath(resolveApp('package.json')),\n};\n\n\n\nmodule.exports.moduleFileExtensions = moduleFileExtensions;\n"]}